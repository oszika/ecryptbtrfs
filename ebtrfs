#!/bin/sh

# Load common functions

file=`realpath $0`
dir=`dirname $file`
source $dir/ecryptfs.sh

# Btrfs commands

help_syncsnap="sync <volsrc> <voldst>: sync all snapshots from source volume to destination volume"

err_usage() {
	error "Usage: $0 $@"
}

getBackup() {
	base=`basename $1`
	dir=`dirname $1`
	echo "$dir/.$base.ecryptfs"
}

isBackup() {
	btrfs property get -ts $1 | grep ro=true > /dev/null
}

help()
{
	name=`basename $0`
	echo -e "Using ecryptfs over btrfs"
	echo -e "$name ((create|mount|umount|home|snapshot) <volpath> | list | sync <volsrc> <voldst>)"
	echo -e "\t create <volpath>:\tcreate new encrypted volume at <volpath>"
	echo -e "\t mount <volpath>:\tmount encrypted volume located at <volpath>"
	echo -e "\t umount <volpath>:\tumount encrypted volume located at <volpath>"
	echo -e "\t snapshot <volpath>:\tcreate snapshot of encrypted volume"
	echo -e "\t list:\tlist encrypted volumes"
	echo -e "\t $help_syncsnap"
	exit -1
}

getSnaps() {
	base=`basename $1`
	dir=`dirname $1`
	realpath "$dir/.$base.snaps"
}

create() {
	name=`realpath $1`
	volume=`getVolume $name`

	safe btrfs subvolume create "$volume"
	debug "Subvolume $volume created"

	ecryptfs_init $name $volume
}

delete() {
	name=`realpath $1`
	volume=`getVolume $name`

	safe btrfs subvolume delete "$volume"
	safe rmdir $name

	debug "Subvolume $volume deleted"
}

list() {
	btrfs subvolume list $@ | perl -ne 'print "$1/$2\n" if /^(.*)\/\.([^\/]+)\.ecryptfs$/'
}

snapshot() {
	[ $# -eq 0 ] && error "Missing volume to snapshot"
	[ $# -gt 1 ] &&	opts=${@: 1:$#-1}
	src=${@: -1:1}

	# btrfs src
	n_src=`realpath $src`
	v_src=`getVolume $n_src`
	s_src=`getSnaps $n_src`

	isBackup $v_src && error "Can't snapshot a backup"

	# snaps path
	mkdir -p $s_src

	# new snapshot dst
	if [ -e "$s_src/init" ]; then
		n_dst="$s_src/$(date +%Y-%m-%d-%H:%M:%S)"
	else
		n_dst="$s_src/init"
	fi

	v_dst=`getVolume $n_dst`

	debug "Take new snapshot: $n_dst"

	safe mkdir -p $n_dst
	safe chmod 500 $n_dst
	safe btrfs subvolume snapshot -r $opts $v_src $v_dst
	sync
}

syncsnaps() {
	src=$1
	dst=$2

	[ "$src" = "" ] && err_usage $help_syncsnap
	[ "$dst" = "" ] && err_usage $help_syncsnap

	# Sync snapshots
	snaps_src=`getSnaps $src`
	snaps_dst=`getSnaps $dst`

	# backup reference on latest snapshot, should be readonly
	ref=`getBackup $dst`
	[ ! -e $ref ] || [ -L $ref ] || error "$ref is not a readonly backup"

	# First snapshot
	if [ ! -e "$snaps_src/init" ]; then
		snapshot -r $src
	fi

	# First sync
	safe mkdir -p $snaps_dst
	if [ ! -e $snaps_dst/init ]; then
		vol=`getVolume $snaps_src/init`

		echo "Sync $snaps_src/init"
		sudo btrfs send $vol | sudo btrfs receive $snaps_dst
		[ $? -ne 0 ] && error "Can't sync $snaps_src/init"

		safe mkdir $snaps_dst/init
	fi

	# Others sync
	prev=`getVolume $snaps_src/init`
	latest=`getVolume $snaps_dst/init`
	for snap in $snaps_src/*; do
		if [ $snap = "$snaps_src/." ] || [ $snap = "$snaps_src/.." ] || [ $snap = "$snaps_src/init" ]; then
			continue
		fi

		vol=`getVolume $snap`

		bn=`basename $snap`
		backup="$snaps_dst/$bn"
		latest=`getVolume $backup`

		if [ ! -e "$backup" ]; then
			echo "Sync $snap (diff $prev $vol)"
			sudo btrfs send -p $prev $vol | sudo btrfs receive $snaps_dst
			[ $? -ne 0 ] && error "Can't sync $prev $vol to $snaps_dst"

			safe mkdir $backup
		fi

		prev=$vol
	done

	# Link last snapshot as latest
	[ -e $ref ] && rm $ref
	ln -v -s $latest $ref
	mkdir -p $dst
}

home() {
	arg=$1
	name=`realpath $arg`
	volume=`getVolume $name`

	safe sudo btrfs subvolume create "$volume"
	debug "Subvolume $volume created"

	safe sudo chown -R $USER:$USER $volume

	ecryptfs_init $name $volume
	ecryptfs_home $arg
}

cmd=$1
shift

case "$cmd" in
	"create")
		create $1
		;;
	"delete")
		delete $1
		;;
	"mount")
		ecryptfs_mount $1
		;;
	"umount")
		ecryptfs_umount $1
		;;
	"home")
		home $1
		;;
	"list")
		list $@
		;;
	"snapshot")
		snapshot $@
		;;
	"sync")
		syncsnaps $@
		;;
	*)
		help
		;;
esac
