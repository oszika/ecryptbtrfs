#!/bin/sh

# Load common functions

file=`realpath $0`
dir=`dirname $file`
source $dir/ecryptfs.sh

# Btrfs commands

help()
{
	name=`basename $0`
	echo -e "Using ecryptfs over btrfs"
	echo -e "$name ((create|mount|umount|home|snapshot) <volpath> | list | sync <volsrc> <voldst>)"
	echo -e "\t create <volpath>:\tcreate new encrypted volume at <volpath>"
	echo -e "\t mount <volpath>:\tmount encrypted volume located at <volpath>"
	echo -e "\t umount <volpath>:\tumount encrypted volume located at <volpath>"
	echo -e "\t snapshot <volpath>:\tcreate snapshot of encrypted volume"
	echo -e "\t list:\tlist encrypted volumes"
	echo -e "\t sync <volsrc> <voldst>:\tsync all snapshots from source volume to destination volume"
	exit -1
}

getSnaps() {
	base=`basename $1`
	dir=`dirname $1`
	realpath "$dir/.$base.snaps"
}

create() {
	name=`realpath $1`
	volume=`getVolume $name`

	safe btrfs subvolume create "$volume"
	debug "Subvolume $volume created"

	ecryptfs_init $name $volume
}

delete() {
	name=`realpath $1`
	volume=`getVolume $name`

	safe btrfs subvolume delete "$volume"
	safe rmdir $name

	debug "Subvolume $volume deleted"
}

list() {
	btrfs subvolume list $@ | perl -ne 'print "$1/$2\n" if /^(.*)\/\.([^\/]+)\.ecryptfs$/'
}

snapshot() {
	[ $# -eq 0 ] && error "Missing volume to snapshot"
	[ $# -gt 1 ] &&	opts=${@: 1:$#-1}
	src=${@: -1:1}

	# btrfs src
	n_src=`realpath $src`
	v_src=`getVolume $n_src`
	s_src=`getSnaps $n_src`

	# snaps path
	mkdir -p $s_src

	# new snapshot dst
	if [ -e "$s_src/init" ]; then
		n_dst="$s_src/$(date +%Y-%m-%d-%H:%M:%S)"
	else
		n_dst="$s_src/init"
	fi

	v_dst=`getVolume $n_dst`

	debug "Take new snapshot: $n_dst"

	safe mkdir -p $n_dst
	safe chmod 500 $n_dst
	safe btrfs subvolume snapshot $opts $v_src $v_dst
	sync
}

syncsnaps() {
	src=$1
	dst=$2

	[ "$src" = "" ] && error "Empty source"
	[ "$dst" = "" ] && error "Empty destination"

	s_src=`getSnaps $src`

	# Destination volume no exists
	if [ ! -e $dst ]; then
		safe btrfs subvolume create $dst
	fi

	# First snapshot
	if [ ! -e "$s_src/init" ]; then
		snapshot -r $src
	fi

	# First sync
	if [ ! -e $dst/init ]; then
		vol=`getVolume $s_src/init`

		# first sync
		echo "Syncing $s_src/init"
		safe sudo btrfs send $vol | safe sudo btrfs receive $dst
		safe mkdir $dst/init
	fi

	# Sync others snapshots
	prev="$s_src/.init.ecryptfs"
	for snap in $s_src/*; do
		if [ $snap = "$s_src/." ] || [ $snap = "$s_src/.." ] || [ $snap = "$s_src/init" ]; then
			continue
		fi

		b_snap=`basename $snap`
		vol=`getVolume $snap`

		if [ -e "$dst/$b_snap" ]; then
			echo "$snap already synced"
		else
			echo "Syncing $snap"
			debug "Send diff <$prev> <$vol> to <$dst>"
			safe sudo btrfs send -p $prev $vol | safe sudo btrfs receive $dst
			safe mkdir $dst/$b_snap
		fi

		prev=$vol
	done
}

cmd=$1
shift

case "$cmd" in
	"create")
		create $1
		;;
	"delete")
		delete $1
		;;
	"mount")
		ecryptfs_mount $1
		;;
	"umount")
		ecryptfs_umount $1
		;;
	"home")
		ecryptfs_home $1
		;;
	"list")
		list $@
		;;
	"snapshot")
		snapshot $@
		;;
	"sync")
		syncsnaps $@
		;;
	*)
		help
		;;
esac
